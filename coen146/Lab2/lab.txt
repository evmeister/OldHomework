lab due on jan 30th
use UDP to transfer files (User Datagram Protocol)
just sends packets without waiting for handshakes or ACKs
can use c++ for interface and file ops
socket c libs
transfer simple txt file
read so many bytes and send transmission as array of chars
write client and server programs
client takes in hostname and filename as args to program
have server running first to have it wait
server port nummber can be any greater than 5000
ipv4

stdio, stdlib, string, sys/types, sys/socket netdb, netinet/in

FUNCTIONS
struct hostent *server_addr = gethostbyname(argv[1]);
-client the hostname passed in is "linux60####" shown in terminal or "localhost"
int sockfd = socket(PF_INET, SOCK_DGRAM, 0);
-client and server. ipv4, udp, blank option. opens file descriptor 
int n = sendto(Sockfd, charArray, arraySizeConstBytes, 0,
 (struct Sockaddr*)&si_server, Sizeof(si_server));
-client. returns number of sent bytes. 
-server recvfrom function has same format as sendto, arg6 set to NULL

CLIENT
struct sockaddr_in si_server; //socket address type ipv4
bzero((char*)&si_server, Sizeof(si_server));
si_server.sin_family=AF_INET; //const
bcopy((char*)server_addr->h_addr,(char*)&si_server.sin_addr, server_addr->h_length);
//copies to struct
//lastly init port number
si_server.sin_port=htons(pickServerPortConst);

SERVER
struct...
bzerp...
si_server...
si_server.sin_addr.s_addr=INADDR_ANY; //const for default machine ip addr
si_server.sin_port=htons(pickServerPortConst);
bind(sockfd, (struct sockaddr*) &si_server, sizeof(si_server));

CodeFlow
Client:
gethostbyname
init sockadder_in struct
socket
get out file data
put data into char array 1024
send at least at least one transmission
sendto
-->
Server:
init sockadder struct
socket
bind
recvfrom
write our file data

FileOps
FILE *fp=fopen("test.txt", "r"); //reading or "w" writing
fgets(charArray, Sizeof(charArray), fp);
fputs(array, fp);
fclose(fp);
reccomend asserting fp not null
