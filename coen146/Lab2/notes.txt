lab due on jan 30th use UDP to transfer files (User Datagram Protocol) just sends packets without waiting for handshakes or ACKs can use c++ for interface and file opssocket c libstransfer simple txt fileread so many bytes and send transmission as array of charswrite client and server programsclient takes in hostname and filename as args to programhave server running first to have it waitserver port nummber can be any greater than 5000ipv4stdio, stdlib, string, sys/types, sys/socket netdb, netinet/inFUNCTIONSstruct hostent *server_addr = gethostbyname(argv[1]);-client the hostname passed in is "linux60####" shown in terminal or "localhost"int sockfd = socket(PF_INET, SOCK_DGRAM, 0);-client and server. ipv4, udp, blank option. opens file descriptor int n = sendto(Sockfd, charArray, arraySizeConstBytes, 0, (struct Sockaddr*)&si_server, Sizeof(si_server));-client. returns number of sent bytes. -server recvfrom function has same format as sendto, arg6 set to NULLCLIENTstruct sockaddr_in si_server; //socket address type ipv4bzero((char*)&si_server, Sizeof(si_server));si_server.sin_family=AF_INET; //constbcopy((char*)server_addr->h_addr,(char*)&si_server.sin_addr, server_addr->h_length);//copies to struct//lastly init port numbersi_server.sin_port=htons(pickServerPortConst);SERVERstruct...bzerp...si_server...si_server.sin_addr.s_addr=INADDR_ANY; //const for default machine ip addrsi_server.sin_port=htons(pickServerPortConst);bind(sockfd, (struct sockaddr*) &si_server, sizeof(si_server));CodeFlowClient:gethostbynameinit sockadder_in structsocketget out file dataput data into char array 1024send at least at least one transmissionsendto-->Server:init sockadder structsocketbindrecvfrowrite our file dataFileOpsFILE *fp=fopen("test.txt", "r"); //reading or "w" writingfgets(charArray, Sizeof(charArray), fp);fputs(array, fp);fclose(fp);reccomend asserting fp not null
